// Variables globales para almacenar el canal de datos y la conexi√≥n peer
var peerConnection = null;
var connectionId = null;

// Estado del an√°lisis de gestos
var gestureAnalysisActive = false;

// Funci√≥n para mostrar el badge del estado de conexi√≥n
function showConnectionBadge(id) {
    connectionId = id;

    // Remover badge existente si existe
    const existingBadge = document.getElementById("connection-badge");
    if (existingBadge) {
        existingBadge.remove();
    }

    // Crear el badge
    const badge = document.createElement("div");
    badge.id = "connection-badge";
    badge.innerHTML = `üÜî ${id}`;

    // A√±adir el badge al body para que sea flotante
    document.body.appendChild(badge);
}

// Funci√≥n para mostrar el estado de "Conectando..."
function showConnectingBadge() {
    // Remover badge existente si existe
    const existingBadge = document.getElementById("connection-badge");
    if (existingBadge) {
        existingBadge.remove();
    }

    // Crear el badge de conectando
    const badge = document.createElement("div");
    badge.id = "connection-badge";
    badge.innerHTML = `‚è≥ Conectando...`;
    badge.classList.add("connecting");

    // A√±adir el badge al body para que sea flotante
    document.body.appendChild(badge);
}

// Funci√≥n para actualizar el badge a conectado
function updateBadgeToConnected(id) {
    const existingBadge = document.getElementById("connection-badge");
    if (existingBadge) {
        existingBadge.innerHTML = `üÜî ${id}`;
        existingBadge.classList.remove("connecting");
        existingBadge.classList.add("connected");
    }
}


// Funci√≥n de log para pintar en consola los mensajes bonitos ‚ú®
function log(message, object) {
    const logElement = document.getElementById("log");
    const timestamp = new Date().toLocaleTimeString();

    let objectHtml = '';
    if (object) {
        if (typeof object === 'string') {
            objectHtml = `<span class="log-string">"${object}"</span>`;
        } else if (typeof object === 'object') {
            objectHtml = `<pre class="log-object">${JSON.stringify(object, null, 2)}</pre>`;
        } else {
            objectHtml = `<span class="log-value">${object}</span>`;
        }
    }

    logElement.innerHTML += `
        <div class="log-entry">
            <span class="log-timestamp">${timestamp}</span>
            <span class="log-message">${message}</span>
            ${objectHtml}
        </div>
    `;

    // Auto-scroll al final
    logElement.scrollTop = logElement.scrollHeight;

    console.log(message, object);
}


// Funci√≥n para enviar mensajes a trav√©s del canal de datos
function sendMessage(message) {
    const channel = dataChannel || remoteDataChannel;
    const sendButton = document.getElementById("send");

    if (channel && channel.readyState === 'open' && !sendButton.disabled) {
        channel.send(message);
        log("üì§ Mensaje enviado:", message);
    } else {
        log("‚ö†Ô∏è El canal de datos no est√° abierto o el bot√≥n est√° deshabilitado");
    }
}

// Mandar el mensaje que se escribe en el input con id "message" cuando se pulsa el bot√≥n con id "send"
document.getElementById("send").addEventListener("click", () => {
    const messageInput = document.getElementById("message");
    const message = messageInput.value;
    messageInput.value = ""; // Limpiar el input despu√©s de enviar el mensaje
    sendMessage(message);
});

// Mandar el mensaje que se escribe en el input con id "message" cuando se pulsa la tecla Enter
document.getElementById("message").addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
        const messageInput = document.getElementById("message");
        const message = messageInput.value;
        sendMessage(message);
        messageInput.value = ""; // Limpiar el input despu√©s de enviar el mensaje
    }
});

async function createPeerConnection() {
    //1. Crear la conexi√≥n RTCPeerConnection y el canal de datos
    log("üöÄ Iniciando conexi√≥n WebRTC");

    peerConnection = new RTCPeerConnection({
        iceServers: [
            { urls: "stun:stun.l.google.com:19302" } // Esto nos permite usar un servidor STUN p√∫blico de Google. 
            // El servidor STUN ayuda a los navegadores a descubrir su direcci√≥n IP p√∫blica y el puerto que deben usar para comunicarse entre s√≠.
        ]
    });

    log("üîó Conexi√≥n RTCPeerConnection creada");

    // Solicitar acceso a la c√°mara y micr√≥fono
    log("üé• Solicitando acceso a c√°mara y micr√≥fono...");    

    // Si tenemos un stream local (video/audio), a√±adir los tracks
    if (localStream) {
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });
        log("üìπ Tracks de video/audio a√±adidos a la conexi√≥n");
    }

    // Configurar el evento para recibir streams remotos
    peerConnection.ontrack = (event) => {
        log("üì∫ Stream remoto recibido");
        const remoteVideo = document.getElementById("remoteVideo");
        remoteVideo.srcObject = event.streams[0];
    };

    // Crear el canal de datos para enviar mensajes
    log("üì° Creando canal de datos para enviar mensajes");
    dataChannel = peerConnection.createDataChannel("chat");

    // Se configura el evento onopen del canal de datos
    dataChannel.onopen = () => {
        log("üü¢ Canal de datos abierto");
        // Habilitar el bot√≥n de env√≠o cuando el canal est√© abierto
        document.getElementById("send").disabled = false;
    };

    // Se configurar el evento onmessage del canal de datos
    dataChannel.onmessage = (event) => {
        const message = event.data;
        console.log("üîç DEBUG: Mensaje recibido:", message); // DEBUG LOG

        // Distinguir entre diferentes tipos de mensajes del servidor
        if (message.includes("ü§ñ Mensaje autom√°tico")) {
            log("üïê Mensaje autom√°tico del servidor:", message);
        } else if (message.includes("üì¢ Echo desde servidor")) {
            log("üì¢ Echo del servidor:", message);
        } else if (message.includes("üéâ")) {
            log("üëã Mensaje de bienvenida:", message);        
        } else if (message.includes("üÜî")) {
            log("üÜî ID de conexi√≥n recibido:", message);
            // Si el mensaje contiene un ID de conexi√≥n, actualizar el badge a conectado
            const connectionIdReceived = message.split("üÜî ")[1];
            connectionId = connectionIdReceived;
            updateBadgeToConnected(connectionIdReceived);
        } else {
            log("üì• Mensaje recibido:", message);
        }
    };

    // Configurar el evento onclose del canal de datos
    dataChannel.onclose = () => {
        log("üî¥ Canal de datos cerrado");
        // Deshabilitar el bot√≥n de env√≠o cuando el canal se cierre
        document.getElementById("send").disabled = true;
    };

    // Configurar el evento oniceconnectionstatechange para manejar los cambios en el estado de conexi√≥n ICE
    peerConnection.oniceconnectionstatechange = (event) => {
        log("üßä Estado ICE:", peerConnection.iceConnectionState);

    };
}

// Negociar la conexi√≥n WebRTC con el servidor
async function negotiate() {


    try {
        log("ü§ù Se crear√° una oferta para iniciar la conexi√≥n WebRTC");
        const offer = await peerConnection.createOffer();
        log("üìù Oferta creada:", offer);
        await peerConnection.setLocalDescription(offer);

        // Promesa que espera a que los ICE candidates sean recolectados
        // Esto es importante para asegurarse de que todos los candidatos ICE se hayan recolectado antes de enviar la oferta al servidor.
        // Los ICE candidates son necesarios para establecer la conexi√≥n entre los pares.
        // Pueden ser locales o remotos, y se utilizan para encontrar la mejor ruta de comunicaci√≥n entre los pares.
        // log("‚è≥ Esperando a que se recolecten todos los ICE candidates...");
        // await new Promise((resolve) => {
        //     peerConnection.onicecandidate = (event) => {
        //         if (event.candidate === null) {
        //             log("‚úÖ Todos los ICE candidates han sido recolectados");
        //             resolve();
        //         } else {
        //             log(`ü•á Nuevo ICE candidate de tipo: ${event.candidate.type}`, event.candidate);
        //         }
        //     };
        // });

        //Enviar la oferta al servidor para hacer la conexi√≥n
        const response = await fetch("/offer", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ sdp: peerConnection.localDescription.sdp, type: peerConnection.localDescription.type })
        });

        log("‚è≥ Oferta enviada al servidor, esperando respuesta...");
        const answer = await response.json();
        log("üì¨ Respuesta recibida del servidor:", answer);
        log("üìú Configurando la descripci√≥n remota con la respuesta del servidor");
        // Esto lo qu hace es configurar la descripci√≥n remota de la conexi√≥n peer con la respuesta del servidor.
        // El objetivo es establecer la conexi√≥n WebRTC entre los pares. Esta indica c√≥mo nos comunicaremos con el otro extremo.
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));

        log("üéâ Conexi√≥n WebRTC negociada con √©xito");


    } catch (error) {
        log("‚ùå Error al negociar la conexi√≥n WebRTC:", error);
    }
}

// Esta funci√≥n se ejecuta cuando se hace clic en el bot√≥n "Iniciar conexi√≥n"
let sessionActive = false;
let localStream = null;

async function start() {
    // Mostrar badge de conectando desde el inicio
    showConnectingBadge();

    // Abrir autom√°ticamente la secci√≥n del chat al iniciar conexi√≥n
    const chatContent = document.getElementById("chat-content");
    const toggleButton = document.getElementById("toggle-chat");

    if (chatContent.classList.contains("collapsed")) {
        chatContent.classList.remove("collapsed");
        toggleButton.innerHTML = "üìù Ocultar Chat";
        log("üí¨ Chat abierto al iniciar conexi√≥n");
    }

    try {
        // Solicitar acceso a la c√°mara y micr√≥fono
        log("üé• Solicitando acceso a c√°mara y micr√≥fono...");
        const cameraSelect = document.getElementById("camera-select");
        const constraints = {
            video: { deviceId: cameraSelect.value, width: { ideal: 640 }, height: { ideal: 480 }, frameRate: { ideal: 30 } },
            audio: { deviceId: "default", sampleRate: 44100, channelCount: 2, echoCancellation: true }
        };
        localStream = await navigator.mediaDevices.getUserMedia(constraints);
        document.getElementById("localVideo").srcObject = localStream;
        await createPeerConnection(localStream);
        await negotiate();
        sessionActive = true;
        updateStartButton();
    } catch (error) {
        log("‚ùå Error accediendo a medios:", error.message);
        await createPeerConnection();
        await negotiate();
        sessionActive = true;
        updateStartButton();
    }
}

async function stopSession() {
    log("üõë Cerrando sesi√≥n y grabaci√≥n...");
    // Avisar al servidor para que detenga la grabaci√≥n
    try {
        await fetch("/stop", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ connectionId })
        });
        log("üì° Aviso de parada enviado al servidor");
    } catch (e) {
        log("‚ö†Ô∏è No se pudo avisar al servidor para detener la grabaci√≥n", e);
    }
    if (peerConnection) {
        peerConnection.getSenders().forEach(sender => {
            if (sender.track) sender.track.stop();
        });
        peerConnection.close();
        peerConnection = null;
    }
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
    }
    document.getElementById("localVideo").srcObject = null;
    document.getElementById("remoteVideo").srcObject = null;
    sessionActive = false;
    updateStartButton();
    log("‚úÖ Sesi√≥n finalizada y recursos liberados.");
}

function updateStartButton() {
    const startButton = document.getElementById("start");
    if (sessionActive) {
        startButton.textContent = "Detener sesi√≥n üõë";
        startButton.onclick = stopSession;
    } else {
        startButton.textContent = "Iniciar conexi√≥n üöÄ";
        startButton.onclick = start;
    }
}

async function init() {
    // Recuperar todas las c√°maras disponibles
    const devices = await navigator.mediaDevices.enumerateDevices();
    log("üì∏ Dispositivos de medios disponibles:", devices);
    const cameraSelect = document.getElementById("camera-select");
    cameraSelect.innerHTML = '';
    devices.filter(device => device.kind === 'videoinput').forEach(device => {
        const option = document.createElement("option");
        option.value = device.deviceId;
        option.textContent = device.label || `C√°mara ${cameraSelect.options.length + 1}`;
        cameraSelect.appendChild(option);
    });
}

window.addEventListener("load", async () => {
    await init();
    updateStartButton();

    // Configurar el bot√≥n de colapsar/expandir chat
    const toggleButton = document.getElementById("toggle-chat");
    toggleButton.addEventListener("click", toggleChat);
});